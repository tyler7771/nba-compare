[{"C:\\Users\\Tyler\\repos\\nba-compare\\src\\index.js":"1","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\App.jsx":"2","C:\\Users\\Tyler\\repos\\nba-compare\\src\\serviceWorker.js":"3","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\root.js":"4","C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\root.js":"5","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\search\\searchBar.jsx":"6","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\searchReducer.js":"7","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\chartsPage.jsx":"8","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\playerReducer.js":"9","C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\search.js":"10","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\statsReducer.js":"11","C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\player.js":"12","C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\stats.js":"13","C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\playerActions.js":"14","C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\searchActions.js":"15","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\header.jsx":"16","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\radarTab.jsx":"17","C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\statsActions.js":"18","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\searchedPlayerPill.jsx":"19","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\radarCard.jsx":"20","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\orderByHelper.js":"21","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\pageHelpers.js":"22","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\doughnutTab.jsx":"23","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\doughnutCard.jsx":"24","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\lineTab.jsx":"25","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\lineCard.jsx":"26"},{"size":1017,"mtime":1612234262729,"results":"27","hashOfConfig":"28"},{"size":585,"mtime":1612277379577,"results":"29","hashOfConfig":"28"},{"size":5141,"mtime":1612234262732,"results":"30","hashOfConfig":"28"},{"size":279,"mtime":1612234262729,"results":"31","hashOfConfig":"28"},{"size":304,"mtime":1612234262731,"results":"32","hashOfConfig":"28"},{"size":1179,"mtime":1612309637857,"results":"33","hashOfConfig":"28"},{"size":400,"mtime":1612234262730,"results":"34","hashOfConfig":"28"},{"size":1558,"mtime":1612375114373,"results":"35","hashOfConfig":"28"},{"size":1865,"mtime":1612309327865,"results":"36","hashOfConfig":"28"},{"size":539,"mtime":1612234262731,"results":"37","hashOfConfig":"28"},{"size":690,"mtime":1612375163936,"results":"38","hashOfConfig":"28"},{"size":455,"mtime":1612309690162,"results":"39","hashOfConfig":"28"},{"size":1196,"mtime":1612363260457,"results":"40","hashOfConfig":"28"},{"size":152,"mtime":1612234262725,"results":"41","hashOfConfig":"28"},{"size":117,"mtime":1612234262725,"results":"42","hashOfConfig":"28"},{"size":625,"mtime":1612234262727,"results":"43","hashOfConfig":"28"},{"size":2007,"mtime":1612326127254,"results":"44","hashOfConfig":"28"},{"size":383,"mtime":1612362186987,"results":"45","hashOfConfig":"28"},{"size":1386,"mtime":1612318171039,"results":"46","hashOfConfig":"28"},{"size":3722,"mtime":1612325821237,"results":"47","hashOfConfig":"28"},{"size":126,"mtime":1612309266521,"results":"48","hashOfConfig":"28"},{"size":1613,"mtime":1612373960181,"results":"49","hashOfConfig":"28"},{"size":2319,"mtime":1612362429912,"results":"50","hashOfConfig":"28"},{"size":3835,"mtime":1612326281943,"results":"51","hashOfConfig":"28"},{"size":1763,"mtime":1612374977767,"results":"52","hashOfConfig":"28"},{"size":1385,"mtime":1612375002382,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"mthzx9",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"C:\\Users\\Tyler\\repos\\nba-compare\\src\\index.js",[],["113","114"],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\App.jsx",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\serviceWorker.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\root.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\root.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\search\\searchBar.jsx",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\searchReducer.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\chartsPage.jsx",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\playerReducer.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\search.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\statsReducer.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\player.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\sagas\\stats.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\playerActions.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\searchActions.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\header.jsx",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\radarTab.jsx",["115","116"],"import React, { useEffect, useState } from \"react\";\r\nimport { generateSearchString, getStats } from \"./pageHelpers\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport RadarCard from \"./charts/radarCard\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSeasonAverages } from \"../../actions/statsActions\";\r\n\r\nlet RadarTab = ({ players, getSeasonAverages, seasonAverages }) => {\r\n  const [isOffenseStats, setIsOffenseStats] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const searchString = generateSearchString(players);\r\n    getSeasonAverages(searchString);\r\n  }, [JSON.stringify(players)]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"radar-btn-container\">\r\n        <ButtonGroup size=\"lg\">\r\n          <Button\r\n            onClick={() => setIsOffenseStats(true)}\r\n            variant={`${isOffenseStats ? \"primary\" : \"outline-primary\"}`}\r\n          >\r\n            Offensive Stats\r\n          </Button>\r\n          <Button\r\n            onClick={() => setIsOffenseStats(false)}\r\n            variant={`${!isOffenseStats ? \"primary\" : \"outline-primary\"}`}\r\n          >\r\n            Defensive Stats\r\n          </Button>\r\n        </ButtonGroup>\r\n        <span className=\"season-astrisk\">\r\n          *All stats are from the 2020-2021 season\r\n        </span>\r\n      </div>\r\n      <Row>\r\n        {seasonAverages &&\r\n          players.map((player, i) => (\r\n            <RadarCard\r\n              player={player}\r\n              key={`radar-card-${i}`}\r\n              stats={getStats(player.id, seasonAverages)}\r\n              isOffenseStats={isOffenseStats}\r\n            />\r\n          ))}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  players: state.players.data,\r\n  seasonAverages: state.stats.seasonAverages,\r\n});\r\n\r\nconst mapDispatchtoProps = {\r\n  getSeasonAverages: getSeasonAverages,\r\n};\r\n\r\nRadarTab = connect(mapStatetoProps, mapDispatchtoProps)(RadarTab);\r\nexport default RadarTab;\r\n","C:\\Users\\Tyler\\repos\\nba-compare\\src\\actions\\statsActions.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\searchedPlayerPill.jsx",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\radarCard.jsx",["117"],"import * as NBAIcons from \"react-nba-logos\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Radar } from \"react-chartjs-2\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { getMainColor } from \"nba-color\";\r\nimport { removePlayer } from \"../../../actions/playerActions\";\r\nimport { removePlayerStats } from \"../../../actions/statsActions\";\r\n\r\nlet RadarCard = ({ player, stats, isOffenseStats, removePlayer }) => {\r\n  const Icon = NBAIcons[player.team.abbreviation];\r\n\r\n  const data = () => {\r\n    const color = getMainColor(player.team.abbreviation).rgb;\r\n    const backgroundColor = `rgba(${color[0]}, ${color[1]}, ${color[2]}, 0.3)`;\r\n    const borderColor = `rgba(${color[0]}, ${color[1]}, ${color[2]}, 1)`;\r\n    const { ast, blk, fg_pct, fg3_pct, ft_pct, reb, stl, turnover } = stats;\r\n    const labels = isOffenseStats\r\n      ? [\"Field Goal %\", \"3 Point %\", \"Free Throw %\"]\r\n      : [\"Assists\", \"Blocks\", \"Rebounds\", \"Steals\", \"Turnovers\"];\r\n    const data = isOffenseStats\r\n      ? [fg_pct * 100, fg3_pct * 100, ft_pct * 100]\r\n      : [ast, blk, reb, stl, turnover];\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          data,\r\n          backgroundColor,\r\n          borderColor,\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const options = {\r\n    scale: {\r\n      ticks: { beginAtZero: true },\r\n    },\r\n    tooltips: {\r\n      callbacks: {\r\n        title: () => {},\r\n        label: (tooltipItem, data) => {\r\n          const label = data.labels[tooltipItem.index];\r\n          data = data.datasets[0].data[tooltipItem.index];\r\n\r\n          if (isOffenseStats) {\r\n            return `${label}: ${Math.round(data)}%`;\r\n          } else {\r\n            return `${label}: ${data}`;\r\n          }\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const mapPosition = (position) => {\r\n    switch (position[0]) {\r\n      case \"C\":\r\n        return \"Center\";\r\n      case \"F\":\r\n        return \"Forward\";\r\n      case \"G\":\r\n        return \"Guard\";\r\n      default:\r\n        return position;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col xs={12} md={6}>\r\n      <div className=\"div\" className={`radar-card ${!stats ? \"no-stats\" : \"\"}`}>\r\n        <FontAwesomeIcon\r\n          icon={faTimesCircle}\r\n          onClick={() => {\r\n            removePlayer(player.id);\r\n            removePlayerStats(player.id);\r\n          }}\r\n        />\r\n        <div className=\"player-info\">\r\n          <div className=\"info-name-logo-container\">\r\n            <h2>{`${player.first_name} ${player.last_name}`}</h2>\r\n            <Icon />\r\n          </div>\r\n          <span>\r\n            {player.team.city} {player.team.name}\r\n          </span>\r\n          {stats && (\r\n            <>\r\n              <span>{mapPosition(player.position)}</span>\r\n              <span>\r\n                {player.height_feet}' {player.height_inches}\"\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n        {stats ? (\r\n          <Radar data={data()} options={options} legend={{ display: false }} />\r\n        ) : (\r\n          <div className=\"didnt-play\">\r\n            {`${player.first_name} ${player.last_name}`} hasn't played this\r\n            season.\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (_, ownProps) => ({\r\n  player: ownProps.player,\r\n  stats: ownProps.stats,\r\n  isOffenseStats: ownProps.isOffenseStats,\r\n});\r\n\r\nconst mapDispatchtoProps = {\r\n  removePlayer: removePlayer,\r\n  removePlayerStats: removePlayerStats,\r\n};\r\n\r\nRadarCard = connect(mapStatetoProps, mapDispatchtoProps)(RadarCard);\r\nexport default RadarCard;\r\n","C:\\Users\\Tyler\\repos\\nba-compare\\src\\reducers\\orderByHelper.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\pageHelpers.js",[],"C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\doughnutTab.jsx",["118","119"],"import React, { useEffect, useState } from \"react\";\r\nimport { generateSearchString, getStats } from \"./pageHelpers\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport DoughnutCard from \"./charts/doughnutCard\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSeasonAverages } from \"../../actions/statsActions\";\r\n\r\nlet RadarTab = ({ players, getSeasonAverages, seasonAverages }) => {\r\n  const [shootingStats, setShootingStats] = useState(\"ft\");\r\n\r\n  useEffect(() => {\r\n    const searchString = generateSearchString(players);\r\n    getSeasonAverages(searchString);\r\n  }, [JSON.stringify(players)]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"radar-btn-container\">\r\n        <ButtonGroup size=\"lg\">\r\n          <Button\r\n            onClick={() => setShootingStats(\"ft\")}\r\n            variant={`${\r\n              shootingStats === \"ft\" ? \"primary\" : \"outline-primary\"\r\n            }`}\r\n          >\r\n            Free Throw %\r\n          </Button>\r\n          <Button\r\n            onClick={() => setShootingStats(\"fg\")}\r\n            variant={`${\r\n              shootingStats === \"fg\" ? \"primary\" : \"outline-primary\"\r\n            }`}\r\n          >\r\n            Field Goal %\r\n          </Button>\r\n          <Button\r\n            onClick={() => setShootingStats(\"fg3\")}\r\n            variant={`${\r\n              shootingStats === \"fg3\" ? \"primary\" : \"outline-primary\"\r\n            }`}\r\n          >\r\n            3 Point %\r\n          </Button>\r\n        </ButtonGroup>\r\n        <span className=\"season-astrisk\">\r\n          *All stats are from the 2020-2021 season\r\n        </span>\r\n      </div>\r\n      <Row>\r\n        {seasonAverages &&\r\n          players.map((player, i) => (\r\n            <DoughnutCard\r\n              player={player}\r\n              key={`pie-card-${i}`}\r\n              stats={getStats(player.id, seasonAverages)}\r\n              shootingStats={shootingStats}\r\n            />\r\n          ))}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  players: state.players.data,\r\n  seasonAverages: state.stats.seasonAverages,\r\n});\r\n\r\nconst mapDispatchtoProps = {\r\n  getSeasonAverages: getSeasonAverages,\r\n};\r\n\r\nRadarTab = connect(mapStatetoProps, mapDispatchtoProps)(RadarTab);\r\nexport default RadarTab;\r\n","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\doughnutCard.jsx",["120"],"import * as NBAIcons from \"react-nba-logos\";\r\n\r\nimport { getMainColor, getSecondaryColor } from \"nba-color\";\r\n\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { removePlayer } from \"../../../actions/playerActions\";\r\nimport { removePlayerStats } from \"../../../actions/statsActions\";\r\n\r\nlet DoughNutCard = ({ player, stats, shootingStats, removePlayer }) => {\r\n  const Icon = NBAIcons[player.team.abbreviation];\r\n\r\n  const data = () => {\r\n    const color1 = getMainColor(player.team.abbreviation).hex;\r\n    const color2 = getSecondaryColor(player.team.abbreviation).hex;\r\n    const backgroundColor = [color1, color2];\r\n\r\n    const labels = [\"Made\", \"Miss\"];\r\n\r\n    const attempt = stats[`${shootingStats}a`];\r\n    const made = stats[`${shootingStats}m`];\r\n    const miss = attempt - made;\r\n    const data = [made, miss];\r\n\r\n    return {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          data,\r\n          backgroundColor,\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  const options = {\r\n    tooltips: {\r\n      callbacks: {\r\n        label: (tooltipItem, data) => {\r\n          const percent =\r\n            tooltipItem.index === 0\r\n              ? stats[`${shootingStats}_pct`] * 100\r\n              : 100 - stats[`${shootingStats}_pct`] * 100;\r\n          return `${data.labels[tooltipItem.index]}: ${\r\n            data.datasets[0].data[tooltipItem.index]\r\n          } of ${stats[`${shootingStats}a`]} (${Math.round(percent)}%)`;\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const mapPosition = (position) => {\r\n    switch (position[0]) {\r\n      case \"C\":\r\n        return \"Center\";\r\n      case \"F\":\r\n        return \"Forward\";\r\n      case \"G\":\r\n        return \"Guard\";\r\n      default:\r\n        return position;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Col xs={12} md={6}>\r\n      <div\r\n        className=\"div\"\r\n        className={`doughnut-card ${!stats ? \"no-stats\" : \"\"}`}\r\n      >\r\n        <FontAwesomeIcon\r\n          icon={faTimesCircle}\r\n          onClick={() => {\r\n            removePlayer(player.id);\r\n            removePlayerStats(player.id);\r\n          }}\r\n        />\r\n        <div className=\"player-info\">\r\n          {!stats ? (\r\n            <div className=\"info-name-logo-container\">\r\n              <h2>{`${player.first_name} ${player.last_name}`}</h2>\r\n              <Icon />\r\n            </div>\r\n          ) : (\r\n            <h2>{`${player.first_name} ${player.last_name}`}</h2>\r\n          )}\r\n          <span>\r\n            {player.team.city} {player.team.name}\r\n          </span>\r\n          {stats && (\r\n            <>\r\n              <span>{mapPosition(player.position)}</span>\r\n              <span>\r\n                {player.height_feet}' {player.height_inches}\"\r\n              </span>\r\n            </>\r\n          )}\r\n        </div>\r\n        {stats ? (\r\n          <>\r\n            <div className=\"icon\">\r\n              <Icon />\r\n            </div>\r\n            <Doughnut\r\n              data={data()}\r\n              options={options}\r\n              legend={{ display: false }}\r\n            />\r\n          </>\r\n        ) : (\r\n          <div className=\"didnt-play\">\r\n            {`${player.first_name} ${player.last_name}`} hasn't played this\r\n            season.\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Col>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (_, ownProps) => ({\r\n  player: ownProps.player,\r\n  stats: ownProps.stats,\r\n  isOffenseStats: ownProps.isOffenseStats,\r\n});\r\n\r\nconst mapDispatchtoProps = {\r\n  removePlayer: removePlayer,\r\n  removePlayerStats: removePlayerStats,\r\n};\r\n\r\nDoughNutCard = connect(mapStatetoProps, mapDispatchtoProps)(DoughNutCard);\r\nexport default DoughNutCard;\r\n","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\lineTab.jsx",["121","122"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  clearLastTenStats,\r\n  getLastTenGamesStats,\r\n} from \"../../actions/statsActions\";\r\nimport { mapStatsLabel, statsSelectDropdownArr } from \"./pageHelpers\";\r\n\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport LineCard from \"./charts/lineCard\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet LineTab = ({\r\n  clearLastTenStats,\r\n  players,\r\n  getLastTenGamesStats,\r\n  lastTen,\r\n}) => {\r\n  const [stat, setStat] = useState(\"pts\");\r\n\r\n  useEffect(() => {\r\n    clearLastTenStats();\r\n    players.forEach((player) => {\r\n      getLastTenGamesStats(player);\r\n    });\r\n  }, [JSON.stringify(players)]);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"radar-btn-container\">\r\n        <DropdownButton id=\"dropdown-basic-button\" title={mapStatsLabel(stat)}>\r\n          {statsSelectDropdownArr.map((statEl, i) => (\r\n            <Dropdown.Item\r\n              key={`stat-dropdown-${i}`}\r\n              onClick={() => setStat(statEl)}\r\n            >\r\n              {mapStatsLabel(statEl)}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </DropdownButton>\r\n        <span className=\"season-astrisk\">\r\n          *All stats are from the 2020-2021 season\r\n        </span>\r\n      </div>\r\n      {lastTen.length === players.length && (\r\n        <LineCard players={players} stats={lastTen} stat={stat} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStatetoProps = (state) => ({\r\n  players: state.players.data,\r\n  lastTen: state.stats.lastTen,\r\n});\r\n\r\nconst mapDispatchtoProps = {\r\n  getLastTenGamesStats: getLastTenGamesStats,\r\n  clearLastTenStats: clearLastTenStats,\r\n};\r\n\r\nLineTab = connect(mapStatetoProps, mapDispatchtoProps)(LineTab);\r\nexport default LineTab;\r\n","C:\\Users\\Tyler\\repos\\nba-compare\\src\\components\\chartsPage\\charts\\lineCard.jsx",[],["123","124"],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":17,"column":6,"nodeType":"131","endLine":17,"endColumn":31,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":17,"column":7,"nodeType":"134","endLine":17,"endColumn":30},{"ruleId":"135","severity":1,"message":"136","line":77,"column":28,"nodeType":"137","endLine":77,"endColumn":80},{"ruleId":"129","severity":1,"message":"130","line":17,"column":6,"nodeType":"131","endLine":17,"endColumn":31,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"133","line":17,"column":7,"nodeType":"134","endLine":17,"endColumn":30},{"ruleId":"135","severity":1,"message":"136","line":73,"column":9,"nodeType":"137","endLine":73,"endColumn":64},{"ruleId":"129","severity":1,"message":"139","line":26,"column":6,"nodeType":"131","endLine":26,"endColumn":31,"suggestions":"140"},{"ruleId":"129","severity":1,"message":"133","line":26,"column":7,"nodeType":"134","endLine":26,"endColumn":30},{"ruleId":"125","replacedBy":"141"},{"ruleId":"127","replacedBy":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getSeasonAverages' and 'players'. Either include them or remove the dependency array. If 'getSeasonAverages' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["145"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["146"],"React Hook useEffect has missing dependencies: 'clearLastTenStats', 'getLastTenGamesStats', and 'players'. Either include them or remove the dependency array. If 'clearLastTenStats' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["147"],["143"],["144"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"148","fix":"150"},{"desc":"151","fix":"152"},"Update the dependencies array to be: [getSeasonAverages, players]",{"range":"153","text":"154"},{"range":"155","text":"154"},"Update the dependencies array to be: [clearLastTenStats, getLastTenGamesStats, players]",{"range":"156","text":"157"},[670,695],"[getSeasonAverages, players]",[674,699],[696,721],"[clearLastTenStats, getLastTenGamesStats, players]"]